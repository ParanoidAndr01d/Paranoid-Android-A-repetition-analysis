# -*- coding: utf-8 -*-
"""Paranoid Android

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nFV829HtVm0UdOc1ia1sMaHwRqNrj8lL
"""

# Commented out IPython magic to ensure Python compatibility.
import re
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

paranoid_lyrics = "please could you stop the noise? Im trying to get some rest \
from all the unborn chicken voices in my head whats that? I may be paranoid, but not an android whats that? \
I may be paranoid, but not an android when I am king you will be first against the wall with your opinion \
which is of no consequence at all whats that? I may be paranoid, but no android whats that? I may be paranoid, \
but no android ambition makes you look pretty ugly kicking and squealing Gucci little piggy you dont remember, \
you dont remember why dont you remember my name? off with his head, man off with his head, man why dont you remember \
my name? I guess he does rain down, rain down come on rain down on me from a great height from a great height height \
rain down, rain down come on rain down on me from a great height from a great height height rain down, rain down come \
on rain down on me thats it, sir youre leaving the crackle of pigskin the dust and the screaming the yuppies networking \
the panic, the vomit the panic, the vomit God loves his children God loves his children, yeah"

# Apostrophes were removed and contractions (such as "I'm", "what's", "you're", etc) are being counted as one word.

# Using re to split the words and the punctuation
split_lyrics = re.findall(r"[\w']+|[.,!?;]", paranoid_lyrics)
print(split_lyrics)

# Separating the unique words 
unique_words = set(split_lyrics)
print(unique_words)

# Counting the number of words (including punctuation marks as separate words) in the whole lyrics
num_words = len(split_lyrics)
print(num_words)

# Counting the number of unique words
num_uniques = len(unique_words)
print(num_uniques)

# Counting the number of punctuation marks in the lyrics
count = 0
for i in range (0, len(split_lyrics)):
  if split_lyrics[i] in ('!', "," ,"\'" ,";" ,"\"", ".", "-" ,"?"):
    count += 1
print(count)

# Counting the number of times each unique word (or punctuation mark) appears
word_dict = {}
for word in unique_words:
  word_dict[word] = 0
print(word_dict)

# Now for the words in the whole song
for word in split_lyrics:
  word_dict[word] = word_dict[word] + 1
print(word_dict)

# Sorting the words/punctuation marks from highest to lowest number of appearances
sort_dict = sorted(word_dict.items(), key = lambda t: t[1], reverse = True)
print(sort_dict)

# Listing the 10 most popular words/marks in the song
toplist = sort_dict[0:10]
toplist

# Changing the list back into a dictionary
top10_dict = dict(toplist)
top10_dict

# Isolating the words/marks, so the number of times they appear won't show
uniqueword10 = list(top10_dict.keys())
uniqueword10

# Visualizing it all
so_axis = np.arange(len(uniqueword10))
plt.xticks(so_axis, uniqueword10)
plt.bar(so_axis, top10_dict.values())
plt.show()
